---
- name: 'Restart nginx'
  ansible.builtin.service:
    name: "{{ nginx_service_name['nginx'] }}"
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'restarted') }}"

- name: 'Reload nginx'
  ansible.builtin.service:
    name: "{{ nginx_service_name['nginx'] }}"
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'reloaded') }}"

- name: 'Restart php-fpm'
  ansible.builtin.service:
    name: "{{ nginx_service_name['php'] }}"
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'restarted') }}"
  when: _use_php

- name: 'Reload php-fpm'
  ansible.builtin.service:
    name: "{{ nginx_service_name['php'] }}"
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'reloaded') }}"
  when: _use_php

- name: 'Restart gunicorn'
  ansible.builtin.service:
    name: "{{ ('gunicorn@' if ansible_facts['service_mgr'] == 'systemd' else 'gunicorn.') ~ item }}"
    state: "{{ ansible_facts['is_chroot'] | ansible.builtin.ternary(omit, 'restarted') }}"
    daemon_reload: "{{ true if ansible_facts['service_mgr'] == 'systemd' else omit }}"
  loop: "{{ nginx_gunicorn_servers.keys() }}"

- name: 'Update nginx compressed static files'
  ansible.builtin.command: '/usr/local/sbin/update_gzip_static.sh'
  register: _update_gzip_static
  changed_when: "_update_gzip_static.stdout != ''"
  listen: nginx_update_gzip_static
  when: "nginx_gzip_static | ansible.builtin.bool"
